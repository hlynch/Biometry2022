C_6[1] <- sum(as.numeric(rbinom(1, size=B_6[1], prob=r_6), rbinom(1, size=B_6[1], prob=r_6)))
C_7p[1] <- sum(as.numeric(rbinom(1, size=B_7p[1], prob=r_7p), rbinom(1, size=B_7p[1], prob=r_7p)))
#
N_1[1] <- sum(as.numeric(C_4[1], C_5[1], C_6[1], C_7p[1]))
# simulation for num_years, starting at year 2 (initial year is year 1)
for (yr in 2:num_years_sim){
# draw parameter values (from beta with realized parameters)
# reproductive success PER EGG
r_realized[h,i,j,k, yr] <- rbeta(1, a_r_realized[h], b_r_realized[h])
r_4 <- r_realized[h,i,j,k, yr] # for the age classes to have diff param values
r_5 <- r_realized[h,i,j,k, yr] # change these each to rbeta(1, a_r_realized, b_r_realized)
r_6 <- r_realized[h,i,j,k, yr]
r_7p <- r_realized[h,i,j,k, yr]
# juvenile survival
s_juv_realized[h,i,j,k, yr] <- rbeta(1, a_s_juv_realized[i], b_s_juv_realized[i])
s_juv <- s_juv_realized[h,i,j,k, yr]
# adult survival
s_ad_realized[h,i,j,k, yr] <- rbeta(1, a_s_ad_realized[j], b_s_ad_realized[j])
s_2 <- s_ad_realized[h,i,j,k, yr] # change for diff param values
s_3 <- s_ad_realized[h,i,j,k, yr]
s_4 <- s_ad_realized[h,i,j,k, yr]
s_5 <- s_ad_realized[h,i,j,k, yr]
s_6 <- s_ad_realized[h,i,j,k, yr]
s_7p <- s_ad_realized[h,i,j,k, yr]
# breeding probability
b_realized[h,i,j,k, yr] <- rbeta(1, a_b_realized[k], b_b_realized[k])
b_4 <- b_realized[h,i,j,k, yr] # change for diff param values
b_5 <- b_realized[h,i,j,k, yr]
b_6 <- b_realized[h,i,j,k, yr]
b_7p <- b_realized[h,i,j,k, yr]
N_2[yr] <- round(0.5*rbinom(1, size=N_1[yr-1], prob=s_juv))
N_3[yr] <- rbinom(1, size=N_2[yr-1], prob=s_2)
N_4[yr] <- rbinom(1, size=N_3[yr-1], prob=s_3)
N_5[yr] <- rbinom(1, size=N_4[yr-1], prob=s_4)
N_6[yr] <- rbinom(1, size=N_5[yr-1], prob=s_5)
N_7p[yr] <- sum(as.numeric(rbinom(1, size=N_6[yr-1], prob=s_6), rbinom(1, size=N_7p[yr-1], prob=s_7p)))
B_4[yr] <- rbinom(1, size=N_4[yr-1], prob=b_4)
B_5[yr] <- rbinom(1, size=N_5[yr-1], prob=b_5)
B_6[yr] <- rbinom(1, size=N_6[yr-1], prob=b_6)
B_7p[yr] <- rbinom(1, size=N_7p[yr-1], prob=b_7p)
B_total[h,i,j,k, yr] <- sum(as.numeric(B_4[yr], B_5[yr], B_6[yr], B_7p[yr]))
# egg 1 + egg 2
C_4[yr] <- sum(as.numeric(rbinom(1, size=B_4[yr-1], prob=r_4), rbinom(1, size=B_4[yr-1], prob=r_4)))
C_5[yr] <- sum(as.numeric(rbinom(1, size=B_5[yr-1], prob=r_5), rbinom(1, size=B_5[yr-1], prob=r_5)))
C_6[yr] <- sum(as.numeric(rbinom(1, size=B_6[yr-1], prob=r_6), rbinom(1, size=B_6[yr-1], prob=r_6)))
C_7p[yr] <- sum(as.numeric(rbinom(1, size=B_7p[yr-1], prob=r_7p), rbinom(1, size=B_7p[yr-1], prob=r_7p)))
N_1[yr] <- sum(as.numeric(C_4[yr], C_5[yr], C_6[yr], C_7p[yr]))
} # close yr
} # close k
} # close j
} # close i
} # close h
# Stop the clock
proc.time() - ptm
plot(1:79,B_total[1,1,1,1,],typ="l")
plot(1:79,B_total[5,1,1,1,],col+'red"')
plot(1:79,B_total[5,1,1,1,],col="red"')
)
plot(1:79,B_total[1,1,1,1,],typ="l")
plot(1:79,B_total[1,1,1,1,],typ="l")
lines(1:79,B_total[5,1,1,1,],col="red")
lines(1:79,B_total[10,1,1,1,],col="red")
lines(1:79,B_total[1,5,1,1,],col="blue")
lines(1:79,B_total[1,1,5,1,],col="purple")
lines(1:79,B_total[1,1,1,5,],col="orange")
hist(rbeta(1000,1,3))
hist(rbeta(1000,1,0.205))
hist(rbeta(1000,1,0.5))
hist(rbeta(1000,1,3))
hist(rbeta(1000,2,3))
a_s_juv <- 2
b_s_juv <- 3
mu_r <- a_r/(a_r + b_r)
mu_s_juv <- a_s_juv/(a_s_juv + b_s_juv)
mu_s_ad <- a_s_ad/(a_s_ad + b_s_ad)
mu_b <- a_b/(a_b + b_b)
num_steps <- 15 # number of steps / values of sigma for each demographic parameter
# BOUND ON SIGMA
# sigma in (0, 0.5)
sigma_steps <- seq(0, 0.5, length.out = num_steps+2)[2:(num_steps+1)] # values of standard deviation of each demographic parameter to be stepped through
year_forecast <- 1982:2060 # years of our simulation
num_years_sim <- length(year_forecast)
# just for checking stuff, I'm also keeping track of the realized values of a & b for each demographic parameter
a_r_realized <- rep(NA, num_steps) # [h]
b_r_realized <- rep(NA, num_steps) # [h]
a_s_juv_realized <- rep(NA, num_steps) # [i]
b_s_juv_realized <- rep(NA, num_steps) # [i]
a_s_ad_realized <- rep(NA, num_steps) # [j]
b_s_ad_realized <- rep(NA, num_steps) # [j]
a_b_realized <- rep(NA, num_steps) # [k]
b_b_realized <- rep(NA, num_steps) # [k]
r_realized <- array(NA, dim = c(num_steps, num_steps, num_steps, num_steps, num_years_sim)) # [h,i,j,k, year]
s_juv_realized <- array(NA, dim = c(num_steps, num_steps, num_steps, num_steps, num_years_sim)) # NOTE: year 1 will always stay NA, since we don't need an initial year survival
s_ad_realized <- array(NA, dim = c(num_steps, num_steps, num_steps, num_steps, num_years_sim)) # NOTE: year 1 will always stay NA, since we don't need an initial year survival
b_realized <- array(NA, dim = c(num_steps, num_steps, num_steps, num_steps, num_years_sim))
B_total <- array(NA, dim = c(num_steps, num_steps, num_steps, num_steps, num_years_sim))
#############################################################################################
# question: is it all good that the initial year is year 1? weird that year 1 will be NA for realized values of s_juv & s_ad?
```
```{r, eval = FALSE}
# start the clock
ptm <- proc.time()
for (h in 1:num_steps){ # r
# for (h in 5:10){ # r
sig <- sigma_steps[h]
a_realized <- (((1-mu_r)/(sig^2)) - (1/mu_r))*(mu_r^2)
if (a_realized > 0){ # check to make sure a is positive and mu & sigma will make a valid beta distribution
a_r_realized[h] <- a_realized
b_r_realized[h] <- a_r_realized[h]*((1/mu_r)-1)
} else { # otherwise skip this step in space, keep everything as NAs
next
}
for (i in 1:num_steps){ # s_juv
sig <- sigma_steps[i]
a_realized <- (((1-mu_s_juv)/(sig^2)) - (1/mu_s_juv))*(mu_s_juv^2)
if (a_realized > 0){ # check to make sure a is positive and mu & sigma will make a valid beta distribution
a_s_juv_realized[i] <- a_realized
b_s_juv_realized[i] <- a_s_juv_realized[i]*((1/mu_s_juv)-1)
} else { # otherwise skip this step in space, keep everything as NAs
next
}
for (j in 1:num_steps){ # s_ad
sig <- sigma_steps[j]
a_realized <- (((1-mu_s_ad)/(sig^2)) - (1/mu_s_ad))*(mu_s_ad^2)
if (a_realized > 0){ # check to make sure a is positive and mu & sigma will make a valid beta distribution
a_s_ad_realized[j] <- a_realized
b_s_ad_realized[j] <- a_s_ad_realized[j]*((1/mu_s_ad)-1)
} else { # otherwise skip this step in space, keep everything as NAs
next
}
for (k in 1:num_steps){ # b
sig <- sigma_steps[k]
a_realized <- (((1-mu_b)/(sig^2)) - (1/mu_b))*(mu_b^2)
if (a_realized > 0){ # check to make sure a is positive and mu & sigma will make a valid beta distribution
a_b_realized[k] <- a_realized
b_b_realized[k] <- a_b_realized[k]*((1/mu_b)-1)
} else { # otherwise skip this step in space, keep everything as NAs
next
}
###################################################################################
# INNER LOOP
# initialize vectors
B_4 <- rep(NA, num_years_sim)
B_5 <- rep(NA, num_years_sim)
B_6 <- rep(NA, num_years_sim)
B_7p <- rep(NA, num_years_sim)
N_1 <- rep(NA, num_years_sim)
N_2 <- rep(NA, num_years_sim)
N_3 <- rep(NA, num_years_sim)
N_4 <- rep(NA, num_years_sim)
N_5 <- rep(NA, num_years_sim)
N_6 <- rep(NA, num_years_sim)
N_7p <- rep(NA, num_years_sim)
C_4 <- rep(NA, num_years_sim)
C_5 <- rep(NA, num_years_sim)
C_6 <- rep(NA, num_years_sim)
C_7p <- rep(NA, num_years_sim)
#
###############################
#
# initial year populations (year 1)
# initial year parameter draws (but only for r & b, we don't need survival in the initial year)
r_realized[h,i,j,k,1] <- rbeta(1, a_r_realized[h], b_r_realized[h])
r_4 <- r_realized[h,i,j,k,1] # for the age classes to have diff param values
r_5 <- r_realized[h,i,j,k,1] # change these each to rbeta(1, a_r_realized, b_r_realized)
r_6 <- r_realized[h,i,j,k,1]
r_7p <- r_realized[h,i,j,k,1]
# breeding probability
b_realized[h,i,j,k,1] <- rbeta(1, a_b_realized[k], b_b_realized[k])
b_4 <- b_realized[h,i,j,k,1] # change for diff param values
b_5 <- b_realized[h,i,j,k,1] # change these each to rbeta(1, a_r_realized, b_r_realized)
b_6 <- b_realized[h,i,j,k,1]
b_7p <- b_realized[h,i,j,k,1]
#
initial_count <- Data$count[1]
B_4[1] <- round(initial_count/4)
B_5[1] <- round(initial_count/4)
B_6[1] <- round(initial_count/4)
B_7p[1] <- round(initial_count/4)
#
B_total[h,i,j,k,1] <- sum(as.numeric(B_4[1], B_5[1], B_6[1], B_7p[1]))
#
N_2[1] <- round(initial_count/4)
N_3[1] <- round(initial_count/4)
#
N_4[1] <- round(B_4[1]/b_4)
N_5[1] <- round(B_5[1]/b_5)
N_6[1] <- round(B_6[1]/b_6)
N_7p[1] <- round(B_7p[1]/b_7p)
#
# check if N_i is too large (close to int overflow), if it is, don't finish this simulation
if (N_2[1] > 1e7){
num_skipped <- num_skipped + 1
next # move onto next simulation in outer for loop
}
#
#
# egg 1 + egg 2
C_4[1] <- sum(as.numeric(rbinom(1, size=B_4[1], prob=r_4), rbinom(1, size=B_4[1], prob=r_4)))
C_5[1] <- sum(as.numeric(rbinom(1, size=B_5[1], prob=r_5), rbinom(1, size=B_5[1], prob=r_5)))
C_6[1] <- sum(as.numeric(rbinom(1, size=B_6[1], prob=r_6), rbinom(1, size=B_6[1], prob=r_6)))
C_7p[1] <- sum(as.numeric(rbinom(1, size=B_7p[1], prob=r_7p), rbinom(1, size=B_7p[1], prob=r_7p)))
#
N_1[1] <- sum(as.numeric(C_4[1], C_5[1], C_6[1], C_7p[1]))
# simulation for num_years, starting at year 2 (initial year is year 1)
for (yr in 2:num_years_sim){
# draw parameter values (from beta with realized parameters)
# reproductive success PER EGG
r_realized[h,i,j,k, yr] <- rbeta(1, a_r_realized[h], b_r_realized[h])
r_4 <- r_realized[h,i,j,k, yr] # for the age classes to have diff param values
r_5 <- r_realized[h,i,j,k, yr] # change these each to rbeta(1, a_r_realized, b_r_realized)
r_6 <- r_realized[h,i,j,k, yr]
r_7p <- r_realized[h,i,j,k, yr]
# juvenile survival
s_juv_realized[h,i,j,k, yr] <- rbeta(1, a_s_juv_realized[i], b_s_juv_realized[i])
s_juv <- s_juv_realized[h,i,j,k, yr]
# adult survival
s_ad_realized[h,i,j,k, yr] <- rbeta(1, a_s_ad_realized[j], b_s_ad_realized[j])
s_2 <- s_ad_realized[h,i,j,k, yr] # change for diff param values
s_3 <- s_ad_realized[h,i,j,k, yr]
s_4 <- s_ad_realized[h,i,j,k, yr]
s_5 <- s_ad_realized[h,i,j,k, yr]
s_6 <- s_ad_realized[h,i,j,k, yr]
s_7p <- s_ad_realized[h,i,j,k, yr]
# breeding probability
b_realized[h,i,j,k, yr] <- rbeta(1, a_b_realized[k], b_b_realized[k])
b_4 <- b_realized[h,i,j,k, yr] # change for diff param values
b_5 <- b_realized[h,i,j,k, yr]
b_6 <- b_realized[h,i,j,k, yr]
b_7p <- b_realized[h,i,j,k, yr]
N_2[yr] <- round(0.5*rbinom(1, size=N_1[yr-1], prob=s_juv))
N_3[yr] <- rbinom(1, size=N_2[yr-1], prob=s_2)
N_4[yr] <- rbinom(1, size=N_3[yr-1], prob=s_3)
N_5[yr] <- rbinom(1, size=N_4[yr-1], prob=s_4)
N_6[yr] <- rbinom(1, size=N_5[yr-1], prob=s_5)
N_7p[yr] <- sum(as.numeric(rbinom(1, size=N_6[yr-1], prob=s_6), rbinom(1, size=N_7p[yr-1], prob=s_7p)))
B_4[yr] <- rbinom(1, size=N_4[yr-1], prob=b_4)
B_5[yr] <- rbinom(1, size=N_5[yr-1], prob=b_5)
B_6[yr] <- rbinom(1, size=N_6[yr-1], prob=b_6)
B_7p[yr] <- rbinom(1, size=N_7p[yr-1], prob=b_7p)
B_total[h,i,j,k, yr] <- sum(as.numeric(B_4[yr], B_5[yr], B_6[yr], B_7p[yr]))
# egg 1 + egg 2
C_4[yr] <- sum(as.numeric(rbinom(1, size=B_4[yr-1], prob=r_4), rbinom(1, size=B_4[yr-1], prob=r_4)))
C_5[yr] <- sum(as.numeric(rbinom(1, size=B_5[yr-1], prob=r_5), rbinom(1, size=B_5[yr-1], prob=r_5)))
C_6[yr] <- sum(as.numeric(rbinom(1, size=B_6[yr-1], prob=r_6), rbinom(1, size=B_6[yr-1], prob=r_6)))
C_7p[yr] <- sum(as.numeric(rbinom(1, size=B_7p[yr-1], prob=r_7p), rbinom(1, size=B_7p[yr-1], prob=r_7p)))
N_1[yr] <- sum(as.numeric(C_4[yr], C_5[yr], C_6[yr], C_7p[yr]))
} # close yr
} # close k
} # close j
} # close i
} # close h
# Stop the clock
proc.time() - ptm
plot(1:79,B_total[1,1,1,1,],typ="l")
plot(1:79,B_total[5,1,1,1,],typ="l")
plot(1:79,B_total[10,1,1,1,],typ="l")
hist(a_b_realized)
a_b_realized
b_b_realized
rbeta(1,a_b_realized,b_b_realized)
rbeta(1,a_b_realized[1],b_b_realized[1])
hist(rbeta(1000,a_b_realized[1],b_b_realized[1]))
hist(rbeta(1000,a_b_realized[2],b_b_realized[2]))
hist(rbeta(1000,a_b_realized[3],b_b_realized[3]))
hist(rbeta(1000,a_b_realized[4],b_b_realized[4]))
hist(rbeta(1000,a_r_realized[1],b_r_realized[1]))
hist(rbeta(1000,a_r_realized[2],b_r_realized[2]))
hist(rbeta(1000,a_r_realized[3],b_r_realized[3]))
hist(rbeta(1000,a_juv_realized[1],b_juv_realized[1]))
hist(rbeta(1000,a_s_juv_realized[1],b_s_juv_realized[1]))
hist(rbeta(1000,a_s_juv_realized[2],b_s_juv_realized[2]))
hist(rbeta(1000,a_s_juv_realized[3],b_s_juv_realized[3]))
hist(rbeta(1000,a_s_juv_realized[4],b_s_juv_realized[4]))
hist(rbeta(1000,a_s_ad_realized[1],b_s_ad_realized[1]))
hist(rbeta(1000,a_s_ad_realized[2],b_s_ad_realized[2]))
hist(rbeta(1000,5,1))
hist(rbeta(1000,10,1))
a_r <- 10
b_r <- 1
a_s_juv <- 10
b_s_juv <- 1
a_s_ad <- 10
b_s_ad <- 1
a_b <- 10
b_b <- 1
# then, we determine the "known" mean for each beta
mu_r <- a_r/(a_r + b_r)
mu_s_juv <- a_s_juv/(a_s_juv + b_s_juv)
mu_s_ad <- a_s_ad/(a_s_ad + b_s_ad)
mu_b <- a_b/(a_b + b_b)
num_steps <- 15 # number of steps / values of sigma for each demographic parameter
# BOUND ON SIGMA
# sigma in (0, 0.5)
sigma_steps <- seq(0, 0.5, length.out = num_steps+2)[2:(num_steps+1)] # values of standard deviation of each demographic parameter to be stepped through
year_forecast <- 1982:2060 # years of our simulation
num_years_sim <- length(year_forecast)
# just for checking stuff, I'm also keeping track of the realized values of a & b for each demographic parameter
a_r_realized <- rep(NA, num_steps) # [h]
b_r_realized <- rep(NA, num_steps) # [h]
a_s_juv_realized <- rep(NA, num_steps) # [i]
b_s_juv_realized <- rep(NA, num_steps) # [i]
a_s_ad_realized <- rep(NA, num_steps) # [j]
b_s_ad_realized <- rep(NA, num_steps) # [j]
a_b_realized <- rep(NA, num_steps) # [k]
b_b_realized <- rep(NA, num_steps) # [k]
r_realized <- array(NA, dim = c(num_steps, num_steps, num_steps, num_steps, num_years_sim)) # [h,i,j,k, year]
s_juv_realized <- array(NA, dim = c(num_steps, num_steps, num_steps, num_steps, num_years_sim)) # NOTE: year 1 will always stay NA, since we don't need an initial year survival
s_ad_realized <- array(NA, dim = c(num_steps, num_steps, num_steps, num_steps, num_years_sim)) # NOTE: year 1 will always stay NA, since we don't need an initial year survival
b_realized <- array(NA, dim = c(num_steps, num_steps, num_steps, num_steps, num_years_sim))
B_total <- array(NA, dim = c(num_steps, num_steps, num_steps, num_steps, num_years_sim))
#############################################################################################
# question: is it all good that the initial year is year 1? weird that year 1 will be NA for realized values of s_juv & s_ad?
```
```{r, eval = FALSE}
# start the clock
ptm <- proc.time()
for (h in 1:num_steps){ # r
# for (h in 5:10){ # r
sig <- sigma_steps[h]
a_realized <- (((1-mu_r)/(sig^2)) - (1/mu_r))*(mu_r^2)
if (a_realized > 0){ # check to make sure a is positive and mu & sigma will make a valid beta distribution
a_r_realized[h] <- a_realized
b_r_realized[h] <- a_r_realized[h]*((1/mu_r)-1)
} else { # otherwise skip this step in space, keep everything as NAs
next
}
for (i in 1:num_steps){ # s_juv
sig <- sigma_steps[i]
a_realized <- (((1-mu_s_juv)/(sig^2)) - (1/mu_s_juv))*(mu_s_juv^2)
if (a_realized > 0){ # check to make sure a is positive and mu & sigma will make a valid beta distribution
a_s_juv_realized[i] <- a_realized
b_s_juv_realized[i] <- a_s_juv_realized[i]*((1/mu_s_juv)-1)
} else { # otherwise skip this step in space, keep everything as NAs
next
}
for (j in 1:num_steps){ # s_ad
sig <- sigma_steps[j]
a_realized <- (((1-mu_s_ad)/(sig^2)) - (1/mu_s_ad))*(mu_s_ad^2)
if (a_realized > 0){ # check to make sure a is positive and mu & sigma will make a valid beta distribution
a_s_ad_realized[j] <- a_realized
b_s_ad_realized[j] <- a_s_ad_realized[j]*((1/mu_s_ad)-1)
} else { # otherwise skip this step in space, keep everything as NAs
next
}
for (k in 1:num_steps){ # b
sig <- sigma_steps[k]
a_realized <- (((1-mu_b)/(sig^2)) - (1/mu_b))*(mu_b^2)
if (a_realized > 0){ # check to make sure a is positive and mu & sigma will make a valid beta distribution
a_b_realized[k] <- a_realized
b_b_realized[k] <- a_b_realized[k]*((1/mu_b)-1)
} else { # otherwise skip this step in space, keep everything as NAs
next
}
###################################################################################
# INNER LOOP
# initialize vectors
B_4 <- rep(NA, num_years_sim)
B_5 <- rep(NA, num_years_sim)
B_6 <- rep(NA, num_years_sim)
B_7p <- rep(NA, num_years_sim)
N_1 <- rep(NA, num_years_sim)
N_2 <- rep(NA, num_years_sim)
N_3 <- rep(NA, num_years_sim)
N_4 <- rep(NA, num_years_sim)
N_5 <- rep(NA, num_years_sim)
N_6 <- rep(NA, num_years_sim)
N_7p <- rep(NA, num_years_sim)
C_4 <- rep(NA, num_years_sim)
C_5 <- rep(NA, num_years_sim)
C_6 <- rep(NA, num_years_sim)
C_7p <- rep(NA, num_years_sim)
#
###############################
#
# initial year populations (year 1)
# initial year parameter draws (but only for r & b, we don't need survival in the initial year)
r_realized[h,i,j,k,1] <- rbeta(1, a_r_realized[h], b_r_realized[h])
r_4 <- r_realized[h,i,j,k,1] # for the age classes to have diff param values
r_5 <- r_realized[h,i,j,k,1] # change these each to rbeta(1, a_r_realized, b_r_realized)
r_6 <- r_realized[h,i,j,k,1]
r_7p <- r_realized[h,i,j,k,1]
# breeding probability
b_realized[h,i,j,k,1] <- rbeta(1, a_b_realized[k], b_b_realized[k])
b_4 <- b_realized[h,i,j,k,1] # change for diff param values
b_5 <- b_realized[h,i,j,k,1] # change these each to rbeta(1, a_r_realized, b_r_realized)
b_6 <- b_realized[h,i,j,k,1]
b_7p <- b_realized[h,i,j,k,1]
#
initial_count <- Data$count[1]
B_4[1] <- round(initial_count/4)
B_5[1] <- round(initial_count/4)
B_6[1] <- round(initial_count/4)
B_7p[1] <- round(initial_count/4)
#
B_total[h,i,j,k,1] <- sum(as.numeric(B_4[1], B_5[1], B_6[1], B_7p[1]))
#
N_2[1] <- round(initial_count/4)
N_3[1] <- round(initial_count/4)
#
N_4[1] <- round(B_4[1]/b_4)
N_5[1] <- round(B_5[1]/b_5)
N_6[1] <- round(B_6[1]/b_6)
N_7p[1] <- round(B_7p[1]/b_7p)
#
# check if N_i is too large (close to int overflow), if it is, don't finish this simulation
if (N_2[1] > 1e7){
num_skipped <- num_skipped + 1
next # move onto next simulation in outer for loop
}
#
#
# egg 1 + egg 2
C_4[1] <- sum(as.numeric(rbinom(1, size=B_4[1], prob=r_4), rbinom(1, size=B_4[1], prob=r_4)))
C_5[1] <- sum(as.numeric(rbinom(1, size=B_5[1], prob=r_5), rbinom(1, size=B_5[1], prob=r_5)))
C_6[1] <- sum(as.numeric(rbinom(1, size=B_6[1], prob=r_6), rbinom(1, size=B_6[1], prob=r_6)))
C_7p[1] <- sum(as.numeric(rbinom(1, size=B_7p[1], prob=r_7p), rbinom(1, size=B_7p[1], prob=r_7p)))
#
N_1[1] <- sum(as.numeric(C_4[1], C_5[1], C_6[1], C_7p[1]))
# simulation for num_years, starting at year 2 (initial year is year 1)
for (yr in 2:num_years_sim){
# draw parameter values (from beta with realized parameters)
# reproductive success PER EGG
r_realized[h,i,j,k, yr] <- rbeta(1, a_r_realized[h], b_r_realized[h])
r_4 <- r_realized[h,i,j,k, yr] # for the age classes to have diff param values
r_5 <- r_realized[h,i,j,k, yr] # change these each to rbeta(1, a_r_realized, b_r_realized)
r_6 <- r_realized[h,i,j,k, yr]
r_7p <- r_realized[h,i,j,k, yr]
# juvenile survival
s_juv_realized[h,i,j,k, yr] <- rbeta(1, a_s_juv_realized[i], b_s_juv_realized[i])
s_juv <- s_juv_realized[h,i,j,k, yr]
# adult survival
s_ad_realized[h,i,j,k, yr] <- rbeta(1, a_s_ad_realized[j], b_s_ad_realized[j])
s_2 <- s_ad_realized[h,i,j,k, yr] # change for diff param values
s_3 <- s_ad_realized[h,i,j,k, yr]
s_4 <- s_ad_realized[h,i,j,k, yr]
s_5 <- s_ad_realized[h,i,j,k, yr]
s_6 <- s_ad_realized[h,i,j,k, yr]
s_7p <- s_ad_realized[h,i,j,k, yr]
# breeding probability
b_realized[h,i,j,k, yr] <- rbeta(1, a_b_realized[k], b_b_realized[k])
b_4 <- b_realized[h,i,j,k, yr] # change for diff param values
b_5 <- b_realized[h,i,j,k, yr]
b_6 <- b_realized[h,i,j,k, yr]
b_7p <- b_realized[h,i,j,k, yr]
N_2[yr] <- round(0.5*rbinom(1, size=N_1[yr-1], prob=s_juv))
N_3[yr] <- rbinom(1, size=N_2[yr-1], prob=s_2)
N_4[yr] <- rbinom(1, size=N_3[yr-1], prob=s_3)
N_5[yr] <- rbinom(1, size=N_4[yr-1], prob=s_4)
N_6[yr] <- rbinom(1, size=N_5[yr-1], prob=s_5)
N_7p[yr] <- sum(as.numeric(rbinom(1, size=N_6[yr-1], prob=s_6), rbinom(1, size=N_7p[yr-1], prob=s_7p)))
B_4[yr] <- rbinom(1, size=N_4[yr-1], prob=b_4)
B_5[yr] <- rbinom(1, size=N_5[yr-1], prob=b_5)
B_6[yr] <- rbinom(1, size=N_6[yr-1], prob=b_6)
B_7p[yr] <- rbinom(1, size=N_7p[yr-1], prob=b_7p)
B_total[h,i,j,k, yr] <- sum(as.numeric(B_4[yr], B_5[yr], B_6[yr], B_7p[yr]))
# egg 1 + egg 2
C_4[yr] <- sum(as.numeric(rbinom(1, size=B_4[yr-1], prob=r_4), rbinom(1, size=B_4[yr-1], prob=r_4)))
C_5[yr] <- sum(as.numeric(rbinom(1, size=B_5[yr-1], prob=r_5), rbinom(1, size=B_5[yr-1], prob=r_5)))
C_6[yr] <- sum(as.numeric(rbinom(1, size=B_6[yr-1], prob=r_6), rbinom(1, size=B_6[yr-1], prob=r_6)))
C_7p[yr] <- sum(as.numeric(rbinom(1, size=B_7p[yr-1], prob=r_7p), rbinom(1, size=B_7p[yr-1], prob=r_7p)))
N_1[yr] <- sum(as.numeric(C_4[yr], C_5[yr], C_6[yr], C_7p[yr]))
} # close yr
} # close k
} # close j
} # close i
} # close h
# Stop the clock
proc.time() - ptm
for (h in 1:num_steps){ # r
for (i in 1:num_steps){ # s_juv
for (j in 1:num_steps){ # s_ad
for (k in 1:num_steps){ # b
if (anyNA(B_total[h,i,j,k,])){
if (!is.na(a_r_realized[h])){
if (!is.na(a_s_juv_realized[i])){
if (!is.na(a_s_ad_realized[j])){
if (!is.na(a_b_realized[k])){
print(c(h,i,j,k))
}
}
}
}
}
}
}
}
}
plot(1:79,B_total[5,1,1,1,],col="red"')
plot(1:79,B_total[1,1,1,1,],typ="l")
plot(1:79,B_total[2,1,1,1,],typ="l")
B_total[1,1,1,1,]
setwd("~/Documents/Projects/Biometry2022")
bookdown::render_book("index.Rmd")
bookdown::render_book("index.Rmd")
0.05/4
0.05/8
setwd("~/Documents/Projects/Biometry2022")
bookdown::render_book("index.Rmd")
mydata<-c(2,3,3,4,5,1,2,3)
table (mydata)
mydata<-c("sun","moon","stars","sun","blackhole","sun")
table(mydata)
mydatatable<-as.vector(table(mydata))
mydatatable
myvector<-c(1,2,3,4)
myothervector<-c(1,2,2,4)
myvector==myothervector
sum(as.numeric(myvector==myothervector))
setwd("~/Desktop/Pew Fellowship modelling")
setwd("~/Documents/Projects/Biometry2022")
bookdown::render_book("index.Rmd")
