}
years<-c()
for (i in 1950:2021)
{
years<-c(years,paste("Year",as.character(i),sep=""))
}
years
chinstrap_table<-data.frame(matrix(ncol=72,nrow=335,dimnames=list(chinstrap_sites, years)))
head(chinstrap_table)
j=1
chinstrap_table[row.name=chinstrap_counts$site_id[j],col.name==paste("Year",as.character(chinstrap_counts$season[j]),sep="")]<-chinstrap_counts$count[j]
chinstrap_counts$site_id[j]
paste("Year",as.character(chinstrap_counts$season[j]),sep="")
chinstrap_table[row.name=chinstrap_counts$site_id[j],col.name==paste("Year",as.character(chinstrap_counts$season[j]),sep="")]
chinstrap_table[row.name=chinstrap_counts$site_id[j],col.name=paste("Year",as.character(chinstrap_counts$season[j]),sep="")]
chinstrap_table[chinstrap_counts$site_id[j],paste("Year",as.character(chinstrap_counts$season[j]),sep="")]
chinstrap_table[chinstrap_counts$site_id[j],paste("Year",as.character(chinstrap_counts$season[j]),sep="")]<-chinstrap_counts$count[j]
View(chinstrap_table)
chinstrap_counts$season[j])
chinstrap_counts$season[j]
chinstrap_counts %>% dplyr::filter(season == chinstrap_counts$season[j])
temp <- chinstrap_counts %>% dplyr::filter(season == chinstrap_counts$season[j] & site_id == chinstrap_counts$site_id[j])
temp
chinstrap_table<-data.frame(matrix(ncol=72,nrow=335,dimnames=list(chinstrap_sites, years)))
for (j in 1:length(chinstrap_counts$site_id))
{
temp <- chinstrap_counts %>% dplyr::filter(season == chinstrap_counts$season[j] & site_id == chinstrap_counts$site_id[j])
chinstrap_table[chinstrap_counts$site_id[j],paste("Year",as.character(chinstrap_counts$season[j]),sep="")]<-max(temp$count)
}
View(chinstrap_table)
head(chinstrap_table)
chinstrap_table<-data.frame(matrix(ncol=72,nrow=335,dimnames=list(chinstrap_sites, years)))
for (j in 1:length(chinstrap_counts$site_id))
{
temp <- chinstrap_counts %>% dplyr::filter(season == chinstrap_counts$season[j] & site_id == chinstrap_counts$site_id[j])
chinstrap_table[chinstrap_counts$site_id[j],paste("Year",as.character(chinstrap_counts$season[j]),sep="")]<-max(temp$count,0.1)
}
View(chinstrap_table)
write.csv(chinstrap_table,"MAPPPD_chinstrap_data.csv")
library(rlpi)
chinstrap_lpi_data <- read.csv("LPI_data template_essential fields.csv", na.strings = "NULL")
chinstrap_lpi_data <- read.csv("LPI_data template_essential fields.csv", na.strings = "NULL")
View(chinstrap_lpi_data)
chinstrap_infile <- create_infile(chinstrap_lpi_data, name="chinstrap_data")
?create_infile
chinstrap_infile <- create_infile(chinstrap_lpi_data, name="chinstrap_data",start_col_name = "Year1950",end_col_name = "Year2021")
create_infile
covert_to_rows(chinstrap_lpi_data,start_col_name="Year1950",end_col_name="Year2021")
convert_to_rows(chinstrap_lpi_data,start_col_name="Year1950",end_col_name="Year2021")
?convert_to_rows
View(chinstrap_lpi_data)
chinstrap_infile <- create_infile(chinstrap_lpi_data, name="chinstrap_data",start_col_name = "X1950",end_col_name = "X2021")
chinstrap_infile <- create_infile(chinstrap_lpi_data, name="chinstrap_data",start_col_name = "X1970",end_col_name = "X2021")
View(chinstrap_lpi_data)
head(chinstrap_counts)
chinstrap_table<-data.frame(matrix(ncol=73,nrow=335,dimnames=list(chinstrap_sites, chinstrap_names,years)))
for (j in 1:length(chinstrap_counts$site_id))
{
temp <- chinstrap_counts %>% dplyr::filter(season == chinstrap_counts$season[j] & site_id == chinstrap_counts$site_id[j])
chinstrap_table[chinstrap_counts$site_id[j],paste("Year",as.character(chinstrap_counts$season[j]),sep="")]<-max(temp$count,0.1)
chinstrap_table[chinstrap_counts$site_id[j],2]<-chinstrap_counts$site_name[j]
}
head(chinstrap_table)
chinstrap_table<-data.frame(matrix(ncol=73,nrow=335,dimnames=list("chinstrap_sites","chinstrap_names",years)))
chinstrap_table<-data.frame(matrix(ncol=73,nrow=335,dimnames=list(chinstrap_sites, years)))
for (j in 1:length(chinstrap_counts$site_id))
{
temp <- chinstrap_counts %>% dplyr::filter(season == chinstrap_counts$season[j] & site_id == chinstrap_counts$site_id[j])
chinstrap_table[chinstrap_counts$site_id[j],paste("Year",as.character(chinstrap_counts$season[j]),sep="")]<-max(temp$count,0.1)
}
View(chinstrap_table)
chinstrap_table<-data.frame(matrix(ncol=72,nrow=335,dimnames=list(chinstrap_sites, years)))
for (j in 1:length(chinstrap_counts$site_id))
{
temp <- chinstrap_counts %>% dplyr::filter(season == chinstrap_counts$season[j] & site_id == chinstrap_counts$site_id[j])
chinstrap_table[chinstrap_counts$site_id[j],paste("Year",as.character(chinstrap_counts$season[j]),sep="")]<-max(temp$count,0.1)
}
head(chinstrap_table)
j=1
j<-chinstrap_counts$site_id[1]
j
chinstrap_counts[j,]$site_name
chinstrap_counts[j,]
chinstrap_counts[row.names(chinstrap_counts)==j,]
chinstrap_counts[chinstrap_counts$site_id==j,]
chinstrap_counts[chinstrap_counts$site_id==j,]$site_name
chinstrap_counts[chinstrap_counts$site_id==j,]$site_name[1]
unique(chinstrap_counts$site_name)
write.csv(unique(chinstrap_counts$site_name),"MAPPPD_chinstrap_site_names.csv")
?mapppdr
head(sites)
chinstrap_counts <- penguin_obs %>%
dplyr::filter(type == "nests" & species_id == "CHPE" & season %in% c(1950:2021)) %>%
left_join(sites, by = "site_id") %>% left_join(sites, by = "latitude") %>% left_join(sites, by = "longitude")
chinstrap_counts <- penguin_obs %>%
dplyr::filter(type == "nests" & species_id == "CHPE" & season %in% c(1950:2021)) %>%
left_join(sites, by = "site_id")
chinstrap_counts<-chinstrap_counts %>% left_join(sites, by = "latitude") %>% left_join(sites, by = "longitude")
head(chinstrap_counts)
chinstrap_counts <- penguin_obs %>%
dplyr::filter(type == "nests" & species_id == "CHPE" & season %in% c(1950:2021)) %>%
left_join(sites, by = "site_id")
head(chinstrap_counts)
chinstrap_counts <- penguin_obs %>%
dplyr::filter(type == "nests" & species_id == "CHPE" & season %in% c(1950:2021)) %>%
left_join(sites, by = "site_id")
# find all the unique site names
chinstrap_sites<-unique(chinstrap_counts$site_id)
years<-c()
for (i in 1950:2021)
{
years<-c(years,paste("Year",as.character(i),sep=""))
}
chinstrap_table<-data.frame(matrix(ncol=72,nrow=335,dimnames=list(chinstrap_sites, years)))
for (j in 1:length(chinstrap_counts$site_id))
{
temp <- chinstrap_counts %>% dplyr::filter(season == chinstrap_counts$season[j] & site_id == chinstrap_counts$site_id[j])
chinstrap_table[chinstrap_counts$site_id[j],paste("Year",as.character(chinstrap_counts$season[j]),sep="")]<-max(temp$count,0.1)
latitude_vector<-c(latitude_vec,temp$latitude)
longitude_vector<-c(longitude_vec,temp$longitude)
}
latitude_vector<-c()
longitude_vector<-c()
for (j in 1:length(chinstrap_counts$site_id))
{
temp <- chinstrap_counts %>% dplyr::filter(season == chinstrap_counts$season[j] & site_id == chinstrap_counts$site_id[j])
chinstrap_table[chinstrap_counts$site_id[j],paste("Year",as.character(chinstrap_counts$season[j]),sep="")]<-max(temp$count,0.1)
latitude_vector<-c(latitude_vec,temp$latitude)
longitude_vector<-c(longitude_vec,temp$longitude)
}
latitude_vec<-c()
longitude_vec<-c()
for (j in 1:length(chinstrap_counts$site_id))
{
temp <- chinstrap_counts %>% dplyr::filter(season == chinstrap_counts$season[j] & site_id == chinstrap_counts$site_id[j])
chinstrap_table[chinstrap_counts$site_id[j],paste("Year",as.character(chinstrap_counts$season[j]),sep="")]<-max(temp$count,0.1)
latitude_vec<-c(latitude_vec,temp$latitude)
longitude_vec<-c(longitude_vec,temp$longitude)
}
head(chinstrap_counts)
head(chinstrap_table)
head(latitude_vec)
?mode
j=1
temp <- chinstrap_counts %>% dplyr::filter(season == chinstrap_counts$season[j] & site_id == chinstrap_counts$site_id[j])
chinstrap_table[chinstrap_counts$site_id[j],paste("Year",as.character(chinstrap_counts$season[j]),sep="")]<-max(temp$count,0.1)
temp
latitude_vec<-c()
latitude_vec<-c(latitude_vec,temp$latitude)
latitude_vec
?vector
latitude_vec<-vector(length=length(chinstrap_counts$site_id))
longitude_vec<-vector(length=length(chinstrap_counts$site_id))
j=1
temp <- chinstrap_counts %>% dplyr::filter(season == chinstrap_counts$season[j] & site_id == chinstrap_counts$site_id[j])
chinstrap_table[chinstrap_counts$site_id[j],paste("Year",as.character(chinstrap_counts$season[j]),sep="")]<-max(temp$count,0.1)
latitude_vec[j]<-mode(temp$latitude)
longitude_vec[j]<-mode(temp$longitude)
latitude_vec
latitude_vec<-vector(length=length(chinstrap_counts$site_id))
longitude_vec<-vector(length=length(chinstrap_counts$site_id))
j=1
temp <- chinstrap_counts %>% dplyr::filter(season == chinstrap_counts$season[j] & site_id == chinstrap_counts$site_id[j])
chinstrap_table[chinstrap_counts$site_id[j],paste("Year",as.character(chinstrap_counts$season[j]),sep="")]<-max(temp$count,0.1)
latitude_vec[j]<-max(temp$latitude)
longitude_vec[j]<-max(temp$longitude)
latitude_vec
chinstrap_table<-data.frame(matrix(ncol=72,nrow=335,dimnames=list(chinstrap_sites, years)))
latitude_vec<-vector(length=length(chinstrap_counts$site_id))
longitude_vec<-vector(length=length(chinstrap_counts$site_id))
for (j in 1:length(chinstrap_counts$site_id))
{
temp <- chinstrap_counts %>% dplyr::filter(season == chinstrap_counts$season[j] & site_id == chinstrap_counts$site_id[j])
chinstrap_table[chinstrap_counts$site_id[j],paste("Year",as.character(chinstrap_counts$season[j]),sep="")]<-max(temp$count,0.1)
latitude_vec[j]<-max(temp$latitude)
longitude_vec[j]<-max(temp$longitude)
}
head(chinstrap_table)
head(latitude_vec)
length(latitude_vec)
dim(chinstrap_table)
length(chinstrap_counts$site_id)
chinstrap_counts[ACUN,]
chinstrap_counts["ACUN",]
chinstrap_counts[chinstrap_counts$site_id=="ACUN",]
chinstrap_counts[chinstrap_counts$site_id=="ACUN",]$latitude[1]
latitude_vec<-vector(length=length(chinstrap_counts$site_id))
longitude_vec<-vector(length=length(chinstrap_counts$site_id))
for (j in 1:length(chinstrap_sites))
{
latitude_vec[j]<-chinstrap_counts[chinstrap_counts$site_id==chinstrap_sites[j],]$latitude[1]
longitude_vec[j]<-chinstrap_counts[chinstrap_counts$site_id==chinstrap_sites[j],]$longitude[1]
}
latitude_vec[1:10]
length(longitude_vec)
length(chinstrap_sites)
j=1
chinstrap_counts[chinstrap_counts$site_id==chinstrap_sites[j],]$latitude
chinstrap_counts[chinstrap_counts$site_id==chinstrap_sites[j],]$latitude[1]
latitude_vec<-vector(length=length(chinstrap_sites))
longitude_vec<-vector(length=length(chinstrap_sites))
for (j in 1:length(chinstrap_sites))
{
latitude_vec[j]<-chinstrap_counts[chinstrap_counts$site_id==chinstrap_sites[j],]$latitude[1]
longitude_vec[j]<-chinstrap_counts[chinstrap_counts$site_id==chinstrap_sites[j],]$longitude[1]
}
length(latitude_vec)
length(longitide_vec)
length(longitude_vec)
latitude_vec
write.csv(cbind(latitude_vec,longitude_vec),"MAPPPD_chinstrap_lat_long.csv")
chinstrap_lpi_data <- read.csv("LPI_data template_essential fields.csv", na.strings = "NULL")
chinstrap_infile <- create_infile(chinstrap_lpi_data, name="chinstrap_data",start_col_name = "X1970",end_col_name = "X2021")
head(chinstrap_lpi_data)
create_infile
pop_data <- chinstrap_lpi_data[TRUE, ]
head(pop_data)
all_data <- convert_to_rows(pop_data, "X1970", end_col_name = "X2021")
convert_to_rows
all_data <- data.frame(Binomial = character(0), ID = numeric(0),
year = numeric(0), popvalue = numeric(0))
pop_data_col_start <- which(colnames(pop_data) == "X1970")
pop_data_col_start
pop_data_col_end <- which(colnames(in_data) == "X2021")
pop_data_col_end <- which(colnames(pop_data) == "X2021")
pop_data_col_end
dimnames_years <- dimnames(in_data[1, pop_data_col_start:pop_data_col_end])[[2]]
dimnames_years <- dimnames(pop_data[1, pop_data_col_start:pop_data_col_end])[[2]]
years = as.numeric(substr(dimnames_years, 2, 5))
d_names = c("Binomial", "ID", years)
binomial_col <- which(colnames(pop_data) == "Binomial")
binomial_col
id_col <- which(colnames(pop_data) == "ID")
pop_data = (pop_data[, c(binomial_col, id_col, pop_data_col_start:pop_data_col_end)])
head(pop_data)
m_pop_data <- reshape2:::melt.data.frame(pop_data, id = c("Binomial",
"ID"), variable.name = "year", value.name = "popvalue")
chinstrap_lpi_data <- read.csv("LPI_data template_essential fields.csv", na.strings = "NULL")
chinstrap_infile <- create_infile(chinstrap_lpi_data, name="chinstrap_data",start_col_name = "X1970",end_col_name = "X2021")
head(chinstrap_infile)
chinstrap_lpi <- LPIMain(chinstrap_infile, REF_YEAR = 1970, PLOT_MAX = 2021, BOOT_STRAP_SIZE = 100, VERBOSE=FALSE)
LPIMain
chinstrap_lpi_data <- read.csv("LPI_data template_essential fields.csv", na.strings = "NULL")
chinstrap_infile <- create_infile(chinstrap_lpi_data, name="chinstrap_data",start_col_name = "X1970",end_col_name = "X2021")
chinstrap_lpi <- LPIMain(chinstrap_infile, REF_YEAR = 1970, PLOT_MAX = 2021, BOOT_STRAP_SIZE = 100, VERBOSE=FALSE)
chinstrap_lpi_data <- read.csv("LPI_data template_essential fields.csv", na.strings = "NULL")
chinstrap_infile <- create_infile(chinstrap_lpi_data, name="chinstrap_data",start_col_name = "X1970",end_col_name = "X2021")
chinstrap_lpi <- LPIMain(chinstrap_infile, REF_YEAR = 1970, PLOT_MAX = 2021, BOOT_STRAP_SIZE = 100, VERBOSE=FALSE)
chinstrap_lpi_data <- read.csv("LPI_data template_essential fields.csv", na.strings = "NULL")
chinstrap_infile <- create_infile(chinstrap_lpi_data, name="chinstrap_data",start_col_name = "X1970",end_col_name = "X2021")
head(chinstrap_lpi_data)
chinstrap_infile <- create_infile(chinstrap_lpi_data, name="chinstrap_data",start_col_name = "X1970",end_col_name = "X2021")
chinstrap_lpi <- LPIMain(chinstrap_infile, REF_YEAR = 1970, PLOT_MAX = 2021, BOOT_STRAP_SIZE = 100, VERBOSE=FALSE)
infile<-chinstrap_infile
chinstrap_lpi <- LPIMain(chinstrap_infile, REF_YEAR = 1970, PLOT_MAX = 2017, BOOT_STRAP_SIZE = 100, VERBOSE=FALSE)
infile=chinstrap_infile
basedir = "."
REF_YEAR = 1970
PLOT_MAX = 2017
force_recalculation = 1
use_weightings = 0
use_weightings_B = 0
title = ""
CI_FLAG = 1
LEV_FLAG = 0
SWITCH_PT_FLAG = 0
BOOT_STRAP_SIZE = 100
save_plots = 1,
plot_lpi = 1
goParallel = FALSE
MODEL_SELECTION_FLAG = 0
GAM_GLOBAL_FLAG = 1
DATA_LENGTH_MIN = 2
AVG_TIME_BETWEEN_PTS_MAX = 100
GLOBAL_GAM_FLAG_SHORT_DATA_FLAG = 0
AUTO_DIAGNOSTIC_FLAG = 1
LAMBDA_MIN = -1
LAMBDA_MAX = 1
ZERO_REPLACE_FLAG = 1
OFFSET_ALL = 0
OFFSET_NONE = FALSE
OFFSET_DIFF = FALSE
LINEAR_MODEL_SHORT_FLAG = FALSE
CAP_LAMBDAS = TRUE
VERBOSE = TRUE
SHOW_PROGRESS = TRUE
infile=chinstrap_infile
basedir = "."
REF_YEAR = 1970
PLOT_MAX = 2017
force_recalculation = 1
use_weightings = 0
use_weightings_B = 0
title = ""
CI_FLAG = 1
LEV_FLAG = 0
SWITCH_PT_FLAG = 0
BOOT_STRAP_SIZE = 100
save_plots = 1
plot_lpi = 1
goParallel = FALSE
MODEL_SELECTION_FLAG = 0
GAM_GLOBAL_FLAG = 1
DATA_LENGTH_MIN = 2
AVG_TIME_BETWEEN_PTS_MAX = 100
GLOBAL_GAM_FLAG_SHORT_DATA_FLAG = 0
AUTO_DIAGNOSTIC_FLAG = 1
LAMBDA_MIN = -1
LAMBDA_MAX = 1
ZERO_REPLACE_FLAG = 1
OFFSET_ALL = 0
OFFSET_NONE = FALSE
OFFSET_DIFF = FALSE
LINEAR_MODEL_SHORT_FLAG = FALSE
CAP_LAMBDAS = TRUE
VERBOSE = TRUE
SHOW_PROGRESS = TRUE
ptm <- proc.time()
`%op%` <- if (goParallel)
foreach::`%dopar%`
else foreach::`%do%`
doParallel::registerDoParallel()
success = dir.create(basedir, showWarnings = FALSE)
if (success) {
print(sprintf("** Created folder: %s", basedir))
}
dir.create(file.path(basedir, "lpi_temp"), showWarnings = FALSE)
if (success) {
print(sprintf("** Created folder: %s", file.path(basedir,
"lpi_temp")))
}
FileTable = read.table(infile, header = TRUE)
FileNames = FileTable$FileName
Group = FileTable[2]
GroupList = unique(Group[[1]])
Weightings = FileTable[3]
use_weightings
use_weightings_B
NoGroups = length(unique(Group[[1]]))
cat("Number of groups: ", NoGroups, "\n")
NoFiles = max(dim(Group))
DSizes <- foreach::foreach(FileNo = 1:NoFiles, .combine = cbind) %op%
{
md5val <- tools::md5sum(toString(FileNames[FileNo]))
if ((force_recalculation == 1) || (!file.exists(file.path(basedir,
"lpi_temp", paste0(md5val, "_dtemp.csv")))) ||
(!file.exists(file.path(basedir, "lpi_temp",
paste0(md5val, "_splambda.csv"))))) {
cat(sprintf("processing file: %s\n", toString(FileNames[FileNo])))
ProcessFile(DatasetName = toString(FileNames[FileNo]),
ref_year = REF_YEAR, MODEL_SELECTION_FLAG = MODEL_SELECTION_FLAG,
GAM_GLOBAL_FLAG = GAM_GLOBAL_FLAG, DATA_LENGTH_MIN = DATA_LENGTH_MIN,
AVG_TIME_BETWEEN_PTS_MAX = AVG_TIME_BETWEEN_PTS_MAX,
GLOBAL_GAM_FLAG_SHORT_DATA_FLAG = GLOBAL_GAM_FLAG_SHORT_DATA_FLAG,
AUTO_DIAGNOSTIC_FLAG = AUTO_DIAGNOSTIC_FLAG,
LAMBDA_MIN = LAMBDA_MIN, LAMBDA_MAX = LAMBDA_MAX,
ZERO_REPLACE_FLAG = ZERO_REPLACE_FLAG, OFFSET_ALL = OFFSET_ALL,
OFFSET_NONE = OFFSET_NONE, OFFSET_DIFF = OFFSET_DIFF,
LINEAR_MODEL_SHORT_FLAG = LINEAR_MODEL_SHORT_FLAG,
CAP_LAMBDAS = CAP_LAMBDAS, SHOW_PROGRESS = SHOW_PROGRESS,
basedir = basedir)
}
}
?op
library(dplyr)
?op
library(readxl)
FishData <- read_excel("~/Desktop/FishData.xlsx")
View(FishData)
head(FishData)
p_1<-FishData$adultCount[FishData$timePeriod==1]/FishData$juvCount[FishData$timePeriod==1]
p_1
p_2<-FishData$adultCount[FishData$timePeriod==2]/FishData$juvCount[FishData$timePeriod==2]
?sample
p_1_mean<-c()
p_2_mean<-c()
for (i in 1:1000)
{
p_1_mean<-c(p_1_mean,mean(sample(p_1,length(p_1),replace=TRUE)))
p_2_mean<-c(p_2_mean,mean(sample(p_2,length(p_2),replace=TRUE)))
}
hist(p_1_mean)
quantiles(p_1_mean,c(0.025,0.5,0.975))
quantile(p_1_mean,c(0.025,0.5,0.975))
quantile(p_2_mean,c(0.025,0.5,0.975))
sd(p_1_mean)
prop.CI = function(p,n,alpha=.05,digits=3,method="likelihood")
{
# Asymptotic (or Wald) interval:
z = qnorm(1-alpha/2)
if (method=='asymptotic') {
se = sqrt(p*(1-p)/n)
CI = list(p=p,CI=c((p-z*se),(p+z*se)),n=n,level=1-alpha,method=method)
}
# Asymptotic (or Wald-test) CIs with continuity correction:
if (method=='asymptotic.cc') {
se = sqrt(p*(1-p)/n)
CI = list(p=p,CI=c((p-z*se-1/(2*n)),(p+z*se+1/(2*n))),n=n,level=1-alpha,
method=method)
}
# Score test (or Wilson) interval:
if (method=='score') {
term1 = 2*n*p + z**2
term2 = z*sqrt(z**2 + 4*n*p*(1-p))
term3 = 2*(n + z**2)
CI = list(p=p,CI=c((term1-term2)/term3,(term1+term2)/term3),n=n,
level=1-alpha,method=method)
}
# Score test (or Wilson) interval with continuity correction:
if (method=='score.cc') {
term1 = 2*n*p + z**2
if (p>0) {
term2L = z*sqrt(z**2 - 2 - 1/n + 4*p*(n*(1-p)+1))
}
if (p<1) {
term2U = z*sqrt(z**2 + 2 - 1/n + 4*p*(n*(1-p)-1))
}
term3 = 2*(n + z**2)
if ((p>0) & (p<1)) {
CI = list(p=p,CI=c((term1-1-term2L)/term3,(term1+1+term2U)/term3),n=n,
level=1-alpha,method=method)
}
if (p==0) {
CI = list(p=p,CI=c(0,CIU=(term1+1+term2U)/term3),n=n,level=1-alpha,
method=method)
}
if (p==1) {
CI = list(p=p,CI=c((term1-1-term2L)/term3,1),n=n,level=1-alpha,
method=method)
}
}
# Binomial ('exact' or Clopper-Pearson) interval:
if (method=='binomial') {
conf.int=binom.test(round(p*n),n,conf.level=1-alpha)$conf.int
CI = list(p=p,CI=c(conf.int[1],conf.int[2]),n=n,level=1-alpha,method=method)
}
# Binomial mid-p quasi-exact interval:
if (method=='binomial.midp') {
x = round(p*n)
uplim = 1
lowlim = 0
if (x == 0) uplim = 1-alpha**(1/n)
if (x == n) lowlim = alpha**(1/n)
if (x > 0 & x < n) {
pp = seq(0.000001,0.999999,length=100000)
a2 = 0.5*pbinom(x-1,n,pp) + 0.5*pbinom(x,n,pp)
uplim = pp[max(which(a2>(alpha/2)))]
lowlim = pp[min(which(a2<(1-alpha/2)))]
}
CI = list(p=p,CI=c(lowlim,uplim),n=n,level=1-alpha,method=method)
}
# Log-likelihood-ratio interval:
if (method=='likelihood') {
x = round(p*n)
k = -qchisq(1-alpha,1)/2
pp = seq(0.000001,0.999999,length=100000)
lik = dbinom(x,size=n,pp)
logLR = log(lik/max(lik))
conf.int=range(pp[logLR > k])
CI = list(p=p,CI=c(conf.int[1],conf.int[2]),n=n,level=1-alpha,method=method)
}
# Jeffreys prior interval:
if (method=='Jeffreys') {
x = round(p*n)
conf.int=qbeta(c(alpha/2,1-alpha/2),x+.5,n-x+.5)
CI = list(p=p,CI=c(conf.int[1],conf.int[2]),n=n,level=1-alpha,method=method)
}
# Agresti-Coull (adding z?/2 successes) interval
# (see: http://www.stat.ufl.edu/~aa/cda/R/one_sample/R1/index.html )
if (method=='Agresti-Coull') {
x = round(p*n)
tr = z**2
suc = tr/2
pp = (x+suc)/(n+tr)
se = sqrt(pp*(1-pp)/(n+tr))
CI = list(p=p,CI=c((pp-z*se),(pp+z*se)),n=n,level=1-alpha,method=method)
if (CI$CI[1] < 0) CI$CI[1]=0
if (CI$CI[2] > 1) CI$CI[2]=1
}
# Agresti-Coull (adding 2 successes and 2 failures) interval:
# (see: http://www.stat.ufl.edu/~aa/cda/R/one_sample/R1/index.html )
if (method=='Agresti.2_2') {
x = round(p*n)
pp = (x+2)/(n+4)
se = sqrt(pp*(1-pp)/(n+4))
CI = list(p=p,CI=c((pp-z*se),(pp+z*se)),n=n,level=1-alpha,method=method)
if (CI$CI[1] < 0) CI$CI[1]=0
if (CI$CI[2] > 1) CI$CI[2]=1
}
# Logit interval:
if (method=='logit') {
lambda = log(p/(1-p))
x = round(p*n)
V = n/(x*(n-x))
conf.int = (c(lambda - z*sqrt(V),lambda + z*sqrt(V)))
conf.int = exp(conf.int)/(1+exp(conf.int))
CI = list(p=p,CI=c(conf.int[1],conf.int[2]),n=n,level=1-alpha,method=method)
}
cat('p ? ',100*(1-alpha),'%-CI = ',round(p,digits),' (',
round(CI$CI[1],digits),'; ',round(CI$CI[2],digits),')\n',sep='')
CI
}
p_1_mean<-sum(FishData$adultCount[FishData$timePeriod==1])/sum(FishData$juvCount[FishData$timePeriod==1])
p_2_mean<-sum(FishData$adultCount[FishData$timePeriod==2])/sum(FishData$juvCount[FishData$timePeriod==2])
ci.1.method1 =prop.CI(p_1_mean,sum(FishData$juvCount[FishData$timePeriod==1]),digits=4,method='asymptotic')$CI
ci.2.method1 =prop.CI(p_2_mean,sum(FishData$juvCount[FishData$timePeriod==2]),digits=4,method='asymptotic')$CI
ci.1.method.binomial =prop.CI(p_1_mean,sum(FishData$juvCount[FishData$timePeriod==1]),digits=4,method='binomial')$CI
ci.2.binomial =prop.CI(p_2_mean,sum(FishData$juvCount[FishData$timePeriod==2]),digits=4,method='binomial')$CI
ci.1.method.binomial.midp =prop.CI(p_1_mean,sum(FishData$juvCount[FishData$timePeriod==1]),digits=4,method='binomial.midp')$CI
ci.2.binomial.midp =prop.CI(p_2_mean,sum(FishData$juvCount[FishData$timePeriod==2]),digits=4,method='binomial.midp')$CI
setwd("~/Documents/Projects/Biometry2022")
bookdown::render_book("index.Rmd")
