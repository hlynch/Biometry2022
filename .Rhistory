sql <- "SELECT * FROM qaqc_l7;"
L7_C2_L1_site_scene_spectral_nodup_qaqc <- dbGetQuery(con, sql)
save(L7_C2_L1_site_scene_spectral_nodup_qaqc, file = "Library/L7_C2_L1_site_scene_spectral_nodup_qaqc.rda")
qaqc_summary <- L7_C2_L1_site_scene_spectral_nodup_qaqc %>%
dplyr::select(site_id, keep, dump, check_it, register) %>%
mutate(keep = as.integer(keep), dump = as.integer(dump), check_it = as.integer(check_it), register = as.integer(register)) %>%
mutate(processed = keep + dump) %>%
group_by(site_id) %>%
summarize(keep = sum(keep), dump = sum(dump), check_it = sum(check_it), register = sum(register), processed = sum(processed), n = n()) %>%
ungroup() %>%
mutate(complete = ifelse(processed == n & check_it == 0, 1, 0))
sum(qaqc_summary$processed) / sum(qaqc_summary$n)
runApp('Documents/Projects/Landsat_L8_cloud_clearing/ShinyApp/app_L7_png.R')
library(RPostgres)
library(tidyverse)
con <- dbConnect(
RPostgres::Postgres(),
dbname = "landsat_qaqc",
host = "landsat-qaqc.crhzrobl6kz8.us-west-2.rds.amazonaws.com",
port = 5432,
user = "frontend",
password = "bushybeard",
sslmode = '')
sql <- "SELECT * FROM qaqc_l7;"
L7_C2_L1_site_scene_spectral_nodup_qaqc <- dbGetQuery(con, sql)
save(L7_C2_L1_site_scene_spectral_nodup_qaqc, file = "Library/L7_C2_L1_site_scene_spectral_nodup_qaqc.rda")
qaqc_summary <- L7_C2_L1_site_scene_spectral_nodup_qaqc %>%
dplyr::select(site_id, keep, dump, check_it, register) %>%
mutate(keep = as.integer(keep), dump = as.integer(dump), check_it = as.integer(check_it), register = as.integer(register)) %>%
mutate(processed = keep + dump) %>%
group_by(site_id) %>%
summarize(keep = sum(keep), dump = sum(dump), check_it = sum(check_it), register = sum(register), processed = sum(processed), n = n()) %>%
ungroup() %>%
mutate(complete = ifelse(processed == n & check_it == 0, 1, 0))
sum(qaqc_summary$processed) / sum(qaqc_summary$n)
library(RPostgres)
library(tidyverse)
con <- dbConnect(
RPostgres::Postgres(),
dbname = "landsat_qaqc",
host = "landsat-qaqc.crhzrobl6kz8.us-west-2.rds.amazonaws.com",
port = 5432,
user = "frontend",
password = "bushybeard",
sslmode = '')
sql <- "SELECT * FROM qaqc_l7;"
L7_C2_L1_site_scene_spectral_nodup_qaqc <- dbGetQuery(con, sql)
save(L7_C2_L1_site_scene_spectral_nodup_qaqc, file = "Library/L7_C2_L1_site_scene_spectral_nodup_qaqc.rda")
qaqc_summary <- L7_C2_L1_site_scene_spectral_nodup_qaqc %>%
dplyr::select(site_id, keep, dump, check_it, register) %>%
mutate(keep = as.integer(keep), dump = as.integer(dump), check_it = as.integer(check_it), register = as.integer(register)) %>%
mutate(processed = keep + dump) %>%
group_by(site_id) %>%
summarize(keep = sum(keep), dump = sum(dump), check_it = sum(check_it), register = sum(register), processed = sum(processed), n = n()) %>%
ungroup() %>%
mutate(complete = ifelse(processed == n & check_it == 0, 1, 0))
sum(qaqc_summary$processed) / sum(qaqc_summary$n)
library(shiny); runApp('Documents/Projects/Landsat_L8_cloud_clearing/ShinyApp/app_L7_png.R')
1.7/6.5
(1.04)^30
(1.01)^30
(1.02)^30
(1.015)^30
(1.015)^100
2946.37*2
99.23*2
3274+955+280+25000+150+12630+40000+8500+25000+175250+6430+13550+35000+450
1151.27*2
phat<-2000/2000000
1.96*sqrt((phat*(1-phat))/2000000)
phat-1.96*sqrt((phat*(1-phat))/2000000)
phat+1.96*sqrt((phat*(1-phat))/2000000)
3120+99+209+43+356+16
hist(rbeta(1000,43,57))
hist(rbeta(1000,82,18))
47858+1138+6532
setwd("~/Documents/Projects/Biometry2022")
bookdown::render_book("index.Rmd")
setwd("~/Desktop/Landsat QAQC")
library(shiny); runApp('qaqc_app.R')
runApp('qaqc_app.R')
runApp('qaqc_app.R')
20+33+1223+35+67+97+34
.5+2+5
8.5+21+16+13+0.5+20.5+9+8+4+6+8+5.5+18.5+6+14+3+7.5
169/17
148+28
293+28
176+321
321/497
library("tidyverse")
setwd("~/Documents/Projects/penguin_sampling")
samples <- read.csv("N_matrix.csv")
# Only sample 1 set of sites
option_1 <- function(n, samples){
# Samples all of the sites to see which ones will be picked
sites <- sample(1:nrow(samples), nrow(samples))
# Creates a new dataframe with the reordered sites
reordered_samples <- samples[sites, ]
# Creates a new dataframe that will have NA values in it, and then the actual
# site information will be copied over
new_samples <- reordered_samples
new_samples[-1] <- NA
# This is only sampling the first n sites
new_samples[1:n,] <- reordered_samples[1:n,]
return(new_samples)
}
option_2 <- function(n, samples){
sites <- sample(1:nrow(samples), nrow(samples))
reordered_samples <- samples[sites, ]
new_samples <- reordered_samples
new_samples[-1] <- NA
# This method samples a new n sites every year
for (i in 1:(ncol(samples)-1)){
new_samples[1:n + (i-1)*n,i+1] <- as.numeric(reordered_samples[1:n + (i-1)*n, i+1])
}
return(new_samples)
}
option_3 <- function(n, samples, group_size){
sites <- sample(1:nrow(samples), nrow(samples))
reordered_samples <- samples[sites, ]
new_samples <- reordered_samples
new_samples[-1] <- NA
i <- 1
# Tacks on an extra site to be sampled while removing the first site in the sampling screen
while (i + group_size - 1 <= ncol(samples)){
new_samples[i:(i+group_size-1), i+1] <- as.numeric(reordered_samples[i:(i+group_size-1), i+1])
i <- i + 1
}
return(new_samples)
}
option_4 <- function(n, samples, steps, common){
sites <- sample(1:nrow(samples), nrow(samples))
reordered_samples <- samples[sites, ]
new_samples <- reordered_samples
new_samples[-1] <- NA
# Common sites that are sampled
new_samples[1:common,-1] <- reordered_samples[1:common,-1]
# Applies the same logic and in option 2, but uses a modulus operator to have it repeat
for (i in 0:(length(samples) - 2)){
new_samples[(common+1):(common+n) + n*(i %% steps), i+2] <- as.numeric(reordered_samples[(common+1):(common+n) + n*(i %% steps), i+2])
}
return(new_samples)
}
option_5 <- function(n, samples, steps, common){
sites <- sample(1:nrow(samples), nrow(samples))
reordered_samples <- samples[sites, ]
new_samples <- reordered_samples
new_samples[-1] <- NA
# Same as in option 4
new_samples[1:common,-1] <- reordered_samples[1:common,-1]
for (i in 0:(length(samples) - 2)){
new_samples[(common+1):(common+n) + n*(i %% steps), i+2] <- as.numeric(reordered_samples[(common+1):(common+n) + n*(i %% steps), i+2])
# Picks a site from the previous year to be sampled in the next year
# Always chooses the first site from each group first, then moves on to the
# second site from each group, then the third and so on.  It will loop back to
# the first site if all sites have been resampled
if (i > 0){
resample_site <- ((i-1) %/% steps) %% n + common + 1 + n*((i - 1) %% steps)
new_samples[resample_site, i+2] <- as.numeric(reordered_samples[resample_site, i+2])
}
}
return(new_samples)
}
# Random sampling
option_6 <- function(n, samples){
new_samples <- samples
new_samples[-1] <- NA
# Generates a new list of random samples for each year
for (i in 1:(length(samples)-1)){
sites <- sample(1:nrow(samples), n)
new_samples[sites,i+1] <- samples[sites, i+1]
}
return(new_samples)
}
option_3(100, samples, 2)
samples$X
site_list <- xlsx::read.xlsx("SiteLocations.xlsx", 1) %>%
filter(ccamlr_id == 48.1)
site_list
samples_48.1 <- samples %>% filter(X %in% site_list$site_id)
samples_48.1
total_sum <- colMeans(samples_48.1[-1], na.rm = T)
df <- data.frame(counts = total_sum[], year = 1970:2020)
mod <- lm(counts ~ year, df)
total_trend <- mod$coefficients[2]
total_trend
mod
summary(mod)
view(samples_48.1)
plot(year = 1970:2020,samples_48.1)
plot(year = 1970:2020,samples_48.1[1,])
dim(samples_48.1)
samples_48.1[1:3,]
samples_48.1[1,]
plot(year = 1970:2020,samples_48.1[1,-1])
length(1970:2020)
length(samples_48.1[1,-1])
plot(1970:2020,samples_48.1[1,-1])
plot(1970:2020,samples_48.1[2,-1])
plot(1970:2020,samples_48.1[3,-1])
plot(1970:2020,samples_48.1[1,-1],title=as.character(samples_48.1[,1]))
plot(1970:2020,samples_48.1[1,-1],main=as.character(samples_48.1[,1]))
plot(1970:2020,samples_48.1[1,-1],main=as.character(samples_48.1[1,1]))
i=1
plot(1970:2020,samples_48.1[i,-1],main=as.character(samples_48.1[i,1]))
i=2
plot(1970:2020,samples_48.1[i,-1],main=as.character(samples_48.1[i,1]))
i=1
plot(1970:2020,samples_48.1[i,-1],main=as.character(samples_48.1[i,1]))
plot(1970:2020,samples_48.1[i,-1],main=as.character(samples_48.1[i,1]),ylim=c(3,11))
i=2
lines(1970:2020,samples_48.1[i,-1],main=as.character(samples_48.1[i,1]))
plot(1970:2020,samples_48.1[i,-1],main=as.character(samples_48.1[i,1]),ylim=c(3,11),typ="l")
i=1
lines(1970:2020,samples_48.1[i,-1],main=as.character(samples_48.1[i,1]))
i=3
lines(1970:2020,samples_48.1[i,-1],main=as.character(samples_48.1[i,1]))
i=4
lines(1970:2020,samples_48.1[i,-1],main=as.character(samples_48.1[i,1]))
i=5
lines(1970:2020,samples_48.1[i,-1],main=as.character(samples_48.1[i,1]))
i=6
lines(1970:2020,samples_48.1[i,-1],main=as.character(samples_48.1[i,1]))
i<-1
plot(1970:2020,samples_48.1[i,-1],ylim=c(3,11),typ="l")
for (i in 2:87)
{
lines(1970:2020,samples_48.1[i,-1],main=as.character(samples_48.1[i,1]))
}
i<-1
plot(1970:2020,samples_48.1[i,-1],ylim=c(2,12),typ="l")
for (i in 2:87)
{
lines(1970:2020,samples_48.1[i,-1],main=as.character(samples_48.1[i,1]))
}
i<-1
plot(1970:2020,samples_48.1[i,-1],ylim=c(0,13),typ="l")
for (i in 2:87)
{
lines(1970:2020,samples_48.1[i,-1],main=as.character(samples_48.1[i,1]))
}
i<-1
plot(1970:2020,samples_48.1[i,-1],ylim=c(-1,13),typ="l")
for (i in 2:87)
{
lines(1970:2020,samples_48.1[i,-1],main=as.character(samples_48.1[i,1]))
}
i<-1
plot(1970:2020,samples_48.1[i,-1]/samples_48.1[1,-1],ylim=c(-1,13),typ="l")
for (i in 2:87)
{
lines(1970:2020,samples_48.1[i,-1]/samples_48.1[1,-1],main=as.character(samples_48.1[i,1]))
}
i<-1
plot(1970:2020,samples_48.1[i,-1]/samples_48.1[1,2],ylim=c(-1,1),typ="l")
for (i in 2:87)
{
lines(1970:2020,samples_48.1[i,-1]/samples_48.1[1,2],main=as.character(samples_48.1[i,1]))
}
samples_48.1[1,2]
head(samples_48.1)
i<-1
plot(1970:2020,samples_48.1[i,-1]-(samples_48.1[i,-1]-samples_48.1[1,2]),ylim=c(-1,1),typ="l")
for (i in 2:87)
{
lines(1970:2020,samples_48.1[i,-1]-(samples_48.1[i,-1]-samples_48.1[1,2]),main=as.character(samples_48.1[i,1]))
}
i<-1
plot(1970:2020,samples_48.1[i,-1]-(samples_48.1[i,-1]-samples_48.1[1,2]),ylim=c(0,2),typ="l")
for (i in 2:87)
{
lines(1970:2020,samples_48.1[i,-1]-(samples_48.1[i,-1]-samples_48.1[1,2]),main=as.character(samples_48.1[i,1]))
}
i=1
samples_48.1[i,-1]-(samples_48.1[i,-1]-samples_48.1[1,2])
i<-1
plot(1970:2020,samples_48.1[i,-1]-(samples_48.1[i,-1]-samples_48.1[1,2]),ylim=c(5,10),typ="l")
for (i in 2:87)
{
lines(1970:2020,samples_48.1[i,-1]-(samples_48.1[i,-1]-samples_48.1[1,2]),main=as.character(samples_48.1[i,1]))
}
i<-1
plot(1970:2020,samples_48.1[i,-1]-(samples_48.1[i,-1]-samples_48.1[1,2]),ylim=c(7,8),typ="l")
for (i in 2:87)
{
lines(1970:2020,samples_48.1[i,-1]-(samples_48.1[i,-1]-samples_48.1[1,2]),main=as.character(samples_48.1[i,1]))
}
i<-1
plot(1970:2020,samples_48.1[i,-1]-(samples_48.1[i,2]-samples_48.1[1,2]),ylim=c(7,8),typ="l")
for (i in 2:87)
{
lines(1970:2020,samples_48.1[i,-1]-(samples_48.1[i,2]-samples_48.1[1,2]),main=as.character(samples_48.1[i,1]))
}
i<-1
plot(1970:2020,samples_48.1[i,-1]-(samples_48.1[i,2]-samples_48.1[1,2]),ylim=c(5,10),typ="l")
for (i in 2:87)
{
lines(1970:2020,samples_48.1[i,-1]-(samples_48.1[i,2]-samples_48.1[1,2]),main=as.character(samples_48.1[i,1]))
}
i<-1
plot(1970:2020,samples_48.1[i,-1]-(samples_48.1[i,2]-samples_48.1[1,2]),ylim=c(4,11),typ="l")
for (i in 2:87)
{
lines(1970:2020,samples_48.1[i,-1]-(samples_48.1[i,2]-samples_48.1[1,2]),main=as.character(samples_48.1[i,1]))
}
i<-1
plot(1970:2020,samples_48.1[i,-1]-(samples_48.1[i,2]-samples_48.1[1,2]),ylim=c(2,11),typ="l")
for (i in 2:87)
{
lines(1970:2020,samples_48.1[i,-1]-(samples_48.1[i,2]-samples_48.1[1,2]),main=as.character(samples_48.1[i,1]))
}
i<-1
plot(1970:2020,samples_48.1[i,-1]-(samples_48.1[i,2]-samples_48.1[1,2]),ylim=c(3,11),typ="l")
for (i in 2:87)
{
lines(1970:2020,samples_48.1[i,-1]-(samples_48.1[i,2]-samples_48.1[1,2]),main=as.character(samples_48.1[i,1]))
}
i<-1
plot(1970:2020,samples_48.1[i,-1]-(samples_48.1[i,12]-samples_48.1[1,12]),ylim=c(3,11),typ="l")
for (i in 2:87)
{
lines(1970:2020,samples_48.1[i,-1]-(samples_48.1[i,12]-samples_48.1[1,12]),main=as.character(samples_48.1[i,1]))
}
site_list <- xlsx::read.xlsx("SiteLocations.xlsx", 1) %>%
filter(ccamlr_id == 48.2)
site_list
samples_48.2 <- samples %>% filter(X %in% site_list$site_id)
i<-1
plot(1970:2020,samples_48.2[i,-1]-(samples_48.2[i,12]-samples_48.2[1,12]),ylim=c(3,11),typ="l")
for (i in 2:87)
{
lines(1970:2020,samples_48.2[i,-1]-(samples_48.2[i,12]-samples_48.2[1,12]),main=as.character(samples_48.2[i,1]))
}
i<-1
plot(1970:2020,samples_48.2[i,-1]-(samples_48.2[i,12]-samples_48.2[1,12]),ylim=c(3,11),typ="l",main="48.2")
for (i in 2:87)
{
lines(1970:2020,samples_48.2[i,-1]-(samples_48.2[i,12]-samples_48.2[1,12]),main=as.character(samples_48.2[i,1]))
}
View(site_list)
View(samples)
site_list <- xlsx::read.xlsx("SiteLocations.xlsx", 1) %>%
filter(ccamlr_id == 48.5)
site_list
samples_48.5 <- samples %>% filter(X %in% site_list$site_id)
site_list <- xlsx::read.xlsx("SiteLocations.xlsx", 1) %>%
filter(ccamlr_id == 48.6)
site_list
samples_48.6 <- samples %>% filter(X %in% site_list$site_id)
site_list <- xlsx::read.xlsx("SiteLocations.xlsx", 1) %>%
filter(ccamlr_id == 58.4.1)
site_list
samples_58.4.1 <- samples %>% filter(X %in% site_list$site_id)
site_list <- xlsx::read.xlsx("SiteLocations.xlsx", 1) %>%
filter(ccamlr_id == 58.4.2)
site_list
samples_58.4.2 <- samples %>% filter(X %in% site_list$site_id)
site_list <- xlsx::read.xlsx("SiteLocations.xlsx", 1) %>%
filter(ccamlr_id == 88.1)
site_list
samples_88.1 <- samples %>% filter(X %in% site_list$site_id)
site_list <- xlsx::read.xlsx("SiteLocations.xlsx", 1) %>%
filter(ccamlr_id == 88.2)
site_list
samples_88.2 <- samples %>% filter(X %in% site_list$site_id)
site_list <- xlsx::read.xlsx("SiteLocations.xlsx", 1) %>%
filter(ccamlr_id == 88.3)
site_list
samples_88.3 <- samples %>% filter(X %in% site_list$site_id)
i<-1
plot(1970:2020,samples_48.1[i,-1]-(samples_48.1[i,12]-samples_48.1[1,12]),ylim=c(3,11),typ="l",main="48.1")
for (i in 2:87)
{
lines(1970:2020,samples_48.1[i,-1]-(samples_48.1[i,12]-samples_48.1[1,12]),main=as.character(samples_48.1[i,1]))
}
i<-1
plot(1970:2020,samples_48.3[i,-1]-(samples_48.3[i,12]-samples_48.3[1,12]),ylim=c(3,11),typ="l",main="48.3")
for (i in 2:87)
{
lines(1970:2020,samples_48.3[i,-1]-(samples_48.3[i,12]-samples_48.3[1,12]),main=as.character(samples_48.3[i,1]))
}
i<-1
plot(1970:2020,samples_88.1[i,-1]-(samples_88.1[i,12]-samples_88.1[1,12]),ylim=c(3,11),typ="l",main="88.1")
for (i in 2:87)
{
lines(1970:2020,samples_88.1[i,-1]-(samples_88.1[i,12]-samples_88.1[1,12]),main=as.character(samples_88.1[i,1]))
}
i<-1
plot(1970:2020,samples_88.1[i,-1]-(samples_88.1[i,12]-samples_88.1[1,12]),ylim=c(10,13),typ="l",main="88.1")
for (i in 2:87)
{
lines(1970:2020,samples_88.1[i,-1]-(samples_88.1[i,12]-samples_88.1[1,12]),main=as.character(samples_88.1[i,1]))
}
i<-1
plot(1970:2020,samples_88.1[i,-1]-(samples_88.1[i,12]-samples_88.1[1,12]),ylim=c(11,14),typ="l",main="88.1")
for (i in 2:87)
{
lines(1970:2020,samples_88.1[i,-1]-(samples_88.1[i,12]-samples_88.1[1,12]),main=as.character(samples_88.1[i,1]))
}
i<-1
plot(1970:2020,samples_88.2[i,-1]-(samples_88.2[i,12]-samples_88.2[1,12]),ylim=c(3,11),typ="l",main="88.2")
for (i in 2:87)
{
lines(1970:2020,samples_88.2[i,-1]-(samples_88.2[i,12]-samples_88.2[1,12]),main=as.character(samples_88.2[i,1]))
}
i<-1
plot(1970:2020,samples_88.2[i,-1]-(samples_88.2[i,12]-samples_88.2[1,12]),ylim=c(2,8),typ="l",main="88.2")
for (i in 2:87)
{
lines(1970:2020,samples_88.2[i,-1]-(samples_88.2[i,12]-samples_88.2[1,12]),main=as.character(samples_88.2[i,1]))
}
i<-1
plot(1970:2020,samples_88.2[i,-1]-(samples_88.2[i,12]-samples_88.2[1,12]),ylim=c(1,8),typ="l",main="88.2")
for (i in 2:87)
{
lines(1970:2020,samples_88.2[i,-1]-(samples_88.2[i,12]-samples_88.2[1,12]),main=as.character(samples_88.2[i,1]))
}
i<-1
plot(1970:2020,samples_48.2[i,-1]-(samples_88.3[i,12]-samples_88.3[1,12]),ylim=c(3,11),typ="l",main="88.3")
for (i in 2:87)
{
lines(1970:2020,samples_88.3[i,-1]-(samples_88.3[i,12]-samples_88.3[1,12]),main=as.character(samples_88.3[i,1]))
}
i<-1
plot(1970:2020,samples_88.3[i,-1]-(samples_88.3[i,12]-samples_88.3[1,12]),ylim=c(3,11),typ="l",main="88.3")
for (i in 2:87)
{
lines(1970:2020,samples_88.3[i,-1]-(samples_88.3[i,12]-samples_88.3[1,12]),main=as.character(samples_88.3[i,1]))
}
i<-1
plot(1970:2020,samples_88.3[i,-1]-(samples_88.3[i,12]-samples_88.3[1,12]),ylim=c(3,7),typ="l",main="88.3")
for (i in 2:87)
{
lines(1970:2020,samples_88.3[i,-1]-(samples_88.3[i,12]-samples_88.3[1,12]),main=as.character(samples_88.3[i,1]))
}
counts
View(df)
df[21:52,]
df[21:51,]
total_sum <- colMeans(samples_48.1[-1], na.rm = T)
df <- data.frame(counts = total_sum[], year = 1970:2020)
mod <- lm(counts ~ year, df[21:51,])
summary(mod)
total_trend <- mod$coefficients[2]
trend_coeff = numeric(dim(samples_48.1)[1])
ts_cor <- numeric(dim(samples_48.1)[1])
for (i in 1:dim(samples_48.1)[1]){
model <- lm(as.numeric(samples_48.1[i, -1]) ~ seq(1970, 2020, by = 1))
trend_coeff[i] <- model$coefficients[2]
ts_cor[i] <- cor(as.numeric(samples_48.1[i, -1]), df[,1], use = 'complete.obs')
}
samples_48.1$trend <- abs(trend_coeff - total_trend)
samples_48.1$ts_cor <- ts_cor
dif_global_trend <- samples_48.1[order(samples_48.1$trend),]
dif_global_trend$X
global_ts_cor <- samples_48.1[order(samples_48.1$ts_cor, decreasing = T), ]
global_ts_cor$X
rank_orders <- data.frame(trend_order = dif_global_trend$X, ts_order = global_ts_cor$X)
write_csv(rank_orders, "rank_orders.csv")
site_list %>% filter((site_id %in% dif_global_trend$X[1:10]) &
(site_id %in% global_ts_cor$X[1:10]))
global_ts_cor
site_list %>% filter((site_id %in% dif_global_trend$X[1:10]) &
(site_id %in% global_ts_cor$X[1:10]))
pwd()
getwd()
global_ts_cor[global_ts_cor$X=="DETA",]
View(rank_orders)
dif_global_trend
df[21,]
trend_coeff = numeric(dim(samples_48.1)[1])
ts_cor <- numeric(dim(samples_48.1)[1])
for (i in 1:dim(samples_48.1)[1]){
model <- lm(as.numeric(samples_48.1[i, -1:22]) ~ seq(1990, 2020, by = 1))
trend_coeff[i] <- model$coefficients[2]
ts_cor[i] <- cor(as.numeric(samples_48.1[i, -1]), df[,1], use = 'complete.obs')
}
setwd("~/Documents/Projects/Biometry2022")
bookdown::render_book("index.Rmd")
theta = .5
N1 = 30
N2 = 15
Z1mat = matrix( 0:N1 , nrow=N2+1 , ncol=N1+1 , byrow=TRUE )
ZTmat = outer( 0:N2 , 0:N1 , "+" )
pZTmat = outer( dbinom( 0:N2 , N2 , theta ) , dbinom( 0:N1 , N1 , theta ) )
pZTmat
FA1or2 = sum( ( ( ZTmat <= loCritNT | ZTmat >= hiCritNT ) # double dagger matrix
| ( Z1mat <= loCritN1 | Z1mat >= hiCritN1 ) # single dagger matrix
) * pZTmat )
loCritNT = (0:NT)[ max( which( cumsum( dbinom(0:NT,NT,theta) ) <= FAmax/2 ) ) ]
hiCritNT = (NT:0)[ max( which( cumsum( dbinom(NT:0,NT,theta) ) <= FAmax/2 ) ) ]
FAmax = .05   # False Alarm maximum for a single test.
NT = N1 + N2  # Total number of flips.
loCritNT = (0:NT)[ max( which( cumsum( dbinom(0:NT,NT,theta) ) <= FAmax/2 ) ) ]
hiCritNT = (NT:0)[ max( which( cumsum( dbinom(NT:0,NT,theta) ) <= FAmax/2 ) ) ]
FA1or2 = sum( ( ( ZTmat <= loCritNT | ZTmat >= hiCritNT ) # double dagger matrix
| ( Z1mat <= loCritN1 | Z1mat >= hiCritN1 ) # single dagger matrix
) * pZTmat )
loCritN1 = (0:N1)[ max( which( cumsum( dbinom(0:N1,N1,theta) ) <= FAmax/2 ) ) ]
hiCritN1 = (N1:0)[ max( which( cumsum( dbinom(N1:0,N1,theta) ) <= FAmax/2 ) ) ]
FA1or2 = sum( ( ( ZTmat <= loCritNT | ZTmat >= hiCritNT ) # double dagger matrix
| ( Z1mat <= loCritN1 | Z1mat >= hiCritN1 ) # single dagger matrix
) * pZTmat )
FA1or2
6125*0.65
setwd("~/Documents/Projects/Biometry2022")
bookdown::render_book("index.Rmd")
750/15
3*365*100
4*365*100
4*365*200
